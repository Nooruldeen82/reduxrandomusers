{"version":3,"sources":["App.js","serviceWorker.js","reducers/rootReducers.jsx","actions/actionTypes.jsx","index.js","actions/rootActions.jsx"],"names":["App","props","className","users","data","map","user","index","key","name","first","last","nat","src","picture","large","alt","Boolean","window","location","hostname","match","initialState","loading","error","reducer","state","action","type","payload","Actions","request_success","request_loading","request_fail","logger","createLogger","store","createStore","applyMiddleware","ReduxThunk","dispatch","axios","get","then","res","results","catch","fail","message","subscribe","ReactDOM","render","getState","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAEe,SAASA,EAAIC,GAC1B,OACE,yBAAKC,UAAU,aAGb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,2CAAd,uBAGA,2BAAOA,UAAU,SACf,2BAAOA,UAAU,WACf,4BACE,iCACA,0CACA,yCACA,uCACA,yCAGJ,+BACGD,EAAME,MAAMC,KACTH,EAAME,MAAMC,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACnB,wBAAIC,IAAKD,GACP,4BAAKA,EAAQ,GACb,4BAAKD,EAAKG,KAAKC,OACf,4BAAKJ,EAAKG,KAAKE,MACf,4BAAKL,EAAKM,KACV,4BACE,yBAAKC,IAAKP,EAAKQ,QAAQC,MAAOC,IAAI,aAIxC,UCvBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EAAe,CACnBC,SAAS,EACTnB,KAAM,GACNoB,MAAO,IA0BMC,EAvBC,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAAK,mBACH,MAAgB,CACdL,SAAS,GAEb,IAAK,kBACH,MAAgB,CACdA,SAAS,EACTnB,KAAK,YAAKuB,EAAOE,UAGrB,IAAK,eACH,MAAgB,CACdN,SAAS,EACTC,MAAOG,EAAOE,SAGlB,QACE,OAAOH,I,iBCnBEI,EANC,CACdC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,aAAc,gB,gBCeVC,EAASC,yBAoBTC,EAAQC,YAAYZ,EAASa,YAAgBC,IAAYL,IAC/DE,EAAMI,UAhBG,SAAAA,GAELA,ECtBK,CACLZ,KAAME,EAAQE,kBDsBdS,IACGC,IAAI,yCACJC,MAAK,SAAAC,GCpBiB,IAAAzC,EDsBrBqC,GCtBqBrC,EDsBEyC,EAAIxC,KAAKyC,QCrB/B,CACLjB,KAAME,EAAQC,gBACdF,QAAS1B,QDqBN2C,OAAM,SAAAtB,GCjBa,IAAAuB,EDmBlBP,GCnBkBO,EDmBEvB,EAAMwB,QClBzB,CACLpB,KAAME,EAAQG,aACdJ,QAASkB,WD8BbX,EAAMa,WAPS,WACbC,IAASC,OACP,kBAACnD,EAAD,CAAKG,MAAOiC,EAAMgB,aAClBC,SAASC,eAAe,YHqFtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.3921715d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function App(props) {\n  return (\n    <div className=\"container\">\n      {/* {console.log(props.users.data)} */}\n\n      <div className=\"row\">\n        <div className=\"col-12 \">\n          <h1 className=\"text-center text-white bg-dark mb-0 p-3\">\n            User Api with Redux\n          </h1>\n          <table className=\"table\">\n            <thead className=\"bg-info\">\n              <tr>\n                <th>#</th>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Country</th>\n                <th>Picture</th>\n              </tr>\n            </thead>\n            <tbody>\n              {props.users.data\n                ? props.users.data.map((user, index) => (\n                    <tr key={index}>\n                      <td>{index + 1}</td>\n                      <td>{user.name.first}</td>\n                      <td>{user.name.last}</td>\n                      <td>{user.nat}</td>\n                      <td>\n                        <img src={user.picture.large} alt=\"pic\" />\n                      </td>\n                    </tr>\n                  ))\n                : null}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  loading: false,\n  data: [],\n  error: \"\"\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"REQUUEST_LOADING\":\n      return (state = {\n        loading: true\n      });\n    case \"REQUEST_SUCCESS\":\n      return (state = {\n        loading: false,\n        data: [...action.payload]\n      });\n\n    case \"REQUEST_FAIL\":\n      return (state = {\n        loading: false,\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","const Actions = {\n  request_success: \"REQUEST_SUCCESS\",\n  request_loading: \"REQUEST_LOADING\",\n  request_fail: \"REQUEST_FAIL\"\n};\n\nexport default Actions;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport reducer from \"./reducers/rootReducers\";\nimport axios from \"axios\";\nimport {\n  actionLoading,\n  actionSuccess,\n  actionFail\n} from \"./actions/rootActions\";\nimport { createLogger } from \"redux-logger\";\nimport { applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\n// store\nconst logger = createLogger();\n\n// dispatch register Flight\n\nconst getUsers = () => {\n  return dispatch => {\n    // dispatch loading action\n    dispatch(actionLoading());\n    axios\n      .get(\"https://randomuser.me/api/?results=10\")\n      .then(res => {\n        // dispach success action\n        dispatch(actionSuccess(res.data.results));\n      })\n      .catch(error => {\n        // disptch error action\n        dispatch(actionFail(error.message));\n      });\n  };\n};\nconst store = createStore(reducer, applyMiddleware(ReduxThunk, logger));\nstore.dispatch(getUsers());\n//const data = store.getState();\nconst render = () => {\n  ReactDOM.render(\n    <App users={store.getState()} />,\n    document.getElementById(\"root\")\n  );\n};\n\nstore.subscribe(render);\nserviceWorker.unregister();\n\n/* \n\nReactDOM.render(\n  <App data={store.getState()} />,\n  document.getElementById(\"root\")\n);\n*/\n","import Actions from \"./actionTypes\";\n\nexport const actionLoading = () => {\n  return {\n    type: Actions.request_loading\n  };\n};\n\nexport const actionSuccess = users => {\n  return {\n    type: Actions.request_success,\n    payload: users\n  };\n};\n\nexport const actionFail = fail => {\n  return {\n    type: Actions.request_fail,\n    payload: fail\n  };\n};\n"],"sourceRoot":""}